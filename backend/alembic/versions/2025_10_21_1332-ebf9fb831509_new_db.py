"""New db

Revision ID: ebf9fb831509
Revises: 4ee11e5ecd35
Create Date: 2025-10-21 13:32:40.258575

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "ebf9fb831509"
down_revision: Union[str, Sequence[str], None] = "4ee11e5ecd35"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "cryptocurrencies",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("symbol", sa.String(length=16), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("symbol"),
    )
    op.create_table(
        "roles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "portfolios",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "trained_models",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("crypto_id", sa.Integer(), nullable=False),
        sa.Column("model_type", sa.String(), nullable=False),
        sa.Column("parameters", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "trained_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["crypto_id"],
            ["cryptocurrencies.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_profiles",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("full_name", sa.String(), nullable=True),
        sa.Column("avatar_url", sa.String(), nullable=True),
        sa.Column("settings", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id"),
    )
    op.create_table(
        "user_roles",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "role_id"),
    )
    op.create_table(
        "portfolio_assets",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("portfolio_id", sa.UUID(), nullable=False),
        sa.Column("crypto_id", sa.Integer(), nullable=False),
        sa.Column("amount", sa.DECIMAL(precision=24, scale=12), nullable=False),
        sa.ForeignKeyConstraint(
            ["crypto_id"],
            ["cryptocurrencies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["portfolio_id"],
            ["portfolios.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "simulation_jobs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("portfolio_id", sa.UUID(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["portfolio_id"],
            ["portfolios.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "simulation_results",
        sa.Column("job_id", sa.UUID(), nullable=False),
        sa.Column("results", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("model_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["job_id"],
            ["simulation_jobs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["model_id"],
            ["trained_models.id"],
        ),
        sa.PrimaryKeyConstraint("job_id"),
    )
    op.drop_table("portfolio_and_simulations")
    op.add_column(
        "cryptocurrency_data", sa.Column("crypto_id", sa.Integer(), nullable=False)
    )
    op.alter_column(
        "cryptocurrency_data",
        "timestamp",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.drop_constraint(
        op.f("cryptocurrency_data_timestamp_key"), "cryptocurrency_data", type_="unique"
    )
    op.drop_index(
        op.f("ix_cryptocurrency_data_symbol"), table_name="cryptocurrency_data"
    )
    op.create_foreign_key(
        None, "cryptocurrency_data", "cryptocurrencies", ["crypto_id"], ["id"]
    )
    op.drop_column("cryptocurrency_data", "symbol")
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.create_unique_constraint(None, "users", ["email"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "users", type_="unique")
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.alter_column(
        "users",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.add_column(
        "cryptocurrency_data",
        sa.Column("symbol", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "cryptocurrency_data", type_="foreignkey")
    op.create_index(
        op.f("ix_cryptocurrency_data_symbol"),
        "cryptocurrency_data",
        ["symbol"],
        unique=False,
    )
    op.create_unique_constraint(
        op.f("cryptocurrency_data_timestamp_key"),
        "cryptocurrency_data",
        ["timestamp"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "cryptocurrency_data",
        "timestamp",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.drop_column("cryptocurrency_data", "crypto_id")
    op.create_table(
        "portfolio_and_simulations",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("symbol", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("amount", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column(
            "projected_value",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("portfolio_and_simulations_user_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("portfolio_and_simulations_pkey")),
    )
    op.drop_table("simulation_results")
    op.drop_table("simulation_jobs")
    op.drop_table("portfolio_assets")
    op.drop_table("user_roles")
    op.drop_table("user_profiles")
    op.drop_table("trained_models")
    op.drop_table("portfolios")
    op.drop_table("roles")
    op.drop_table("cryptocurrencies")
    # ### end Alembic commands ###
